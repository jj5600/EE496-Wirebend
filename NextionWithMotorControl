#define dirPin1 2     //stepper1 direction_pin
#define stepPin1 3    //stepper1 step_pin
#define dirPin2 4    //stepper2 direction_pin
#define stepPin2 5   //stepper2 step_pin
#define dirPin3 6    //stepper3 direction_pin
#define stepPin3 7   //stepper3 step_pin
#define dirPin4 8    //stepper4 direction_pin
#define stepPin4 9   //stepper4 step_pin
#define dirPin5 10   //stepper5 direction_pin
#define stepPin5 11  //stepper5 step_pin
#define stepsPerRevolution 200 //steps per revolution for each motor

String data;   // string variable to store incoming serial data
bool start_flag=false; // bool variable to store the start and pause status

int motor_speed=0;
int motor1_speed=0;
int motor2_speed=0;
int motor3_speed=0;
int motor4_speed=0;
int motor5_speed=0;

int stepperMotorSpeed1=0;
int stepperMotorSpeed2=0;
int stepperMotorSpeed3=0;
int stepperMotorSpeed4=0;
int stepperMotorSpeed5=0;

float start_angle=0;
float start_angle1=0;
float start_angle2=0; 
float start_angle3=0; 
float start_angle4=0; 
float start_angle5=0; 
 
float stop_angle=0;
float stop_angle1=0;
float stop_angle2=0;
float stop_angle3=0;
float stop_angle4=0;
float stop_angle5=0;

int cycle_count=0;
int cycle_count1=0;
int cycle_count2=0;
int cycle_count3=0;
int cycle_count4=0;
int cycle_count5=0;

int counter=0;
int counter1=0;
int counter2=0;
int counter3=0;
int counter4=0;
int counter5=0;

String station1_status;
String station2_status;
String station3_status;
String station4_status;
String station5_status;
bool s1=false;
bool s2=false;
bool s3=false;
bool s4=false;
bool s5=false;

void setup()
{
  Serial.begin(9600);
  Serial1.begin(9600);
  pinMode(stepPin1, OUTPUT);
  pinMode(dirPin1, OUTPUT);
  pinMode(stepPin2, OUTPUT);
  pinMode(dirPin2, OUTPUT);
  pinMode(stepPin3, OUTPUT);
  pinMode(dirPin3, OUTPUT);
  pinMode(stepPin4, OUTPUT);
  pinMode(dirPin4, OUTPUT);
  pinMode(stepPin5, OUTPUT);
  pinMode(dirPin5, OUTPUT);

}
void loop() 
{ 
serial_data();
if((start_flag==true)&&(station1_status=="ON"))  //if start button is pressed and station1 button is pressed
 {
  stepper_motor1(); // stepper1 motor function call
  if(counter1>cycle_count1)  // if counter1 is greater than entered count cycle then reset it.
  { 
    motor1_speed=0;
    start_angle1=0;
    stop_angle1=0;
    cycle_count1=0;
    counter1=0;
    //start_flag=false;
  }
 }

 if((start_flag==true)&&(station2_status=="ON"))//if start button is pressed and station2 button is pressed
 {
  stepper_motor2(); // stepper2 motor function call
  if(counter2>cycle_count2)  // if counter2 is greater than entered count cycle then reset it.
  { 
    motor2_speed=0;
    start_angle2=0;
    stop_angle2=0;
    cycle_count2=0;
    counter2=0;
    //start_flag=false;
  }
 }

 if((start_flag==true)&&(station3_status=="ON"))//if start button is pressed and station3 button is pressed
 {
  stepper_motor3(); // stepper3 motor function call
  if(counter3>cycle_count3)  // if counter3 is greater than entered count cycle then reset it.
  { 
    motor3_speed=0;
    start_angle3=0;
    stop_angle3=0;
    cycle_count3=0;
    counter3=0;
    //start_flag=false;
  }
 }

 if((start_flag==true)&&(station4_status=="ON"))//if start button is pressed and station4 button is pressed
 {
  stepper_motor4(); // stepper4 motor function call
  if(counter4>cycle_count4)  // if counter4 is greater than entered count cycle then reset it.
  { 
    motor4_speed=0;
    start_angle4=0;
    stop_angle4=0;
    cycle_count4=0;
    counter4=0;
    //start_flag=false;
  }
 }

 if((start_flag==true)&&(station5_status=="ON"))//if start button is pressed and station5 button is pressed
 {
  stepper_motor5(); // stepper5 motor function call
  if(counter5>cycle_count5)  // if counter5 is greater than entered count cycle then reset it.
  { 
    motor5_speed=0;
    start_angle5=0;
    stop_angle5=0;
    cycle_count5=0;
    counter5=0;
    //start_flag=false;
  }
 }

}

//////////////////////////////////////////////
void serial_data()
{
 while(Serial1.available())  //wait until serial data is available
    {   
     if(Serial1.available() > 0) // if available data is greater than zero
       {
        data=Serial1.readString(); //Read serial data on Rx1,Tx1
        Serial.println(data);      // Print serial data
        if(data.startsWith("START"))  
        {start_flag=true;}
        
       if(data.startsWith("PAUSE"))
        {start_flag=false;}

        if(data.startsWith("s1"))
        {
          s1=true;
          s2=false;
          s3=false;
          s4=false;
          s5=false;
        }

        if(data.startsWith("s2"))
        {
          s1=false;
          s2=true;
          s3=false;
          s4=false;
          s5=false;
        }

        if(data.startsWith("s3"))
        {
          s1=false;
          s2=false;
          s3=true;
          s4=false;
          s5=false;
        }

        if(data.startsWith("s4"))
        {
          s1=false;
          s2=false;
          s3=false;
          s4=true;
          s5=false;
        }

        if(data.startsWith("s5"))
        {
          s1=false;
          s2=false;
          s3=false;
          s4=false;
          s5=true;
        }
  
       if(data.startsWith("save"))
          {
        int start_angle_index = data.indexOf("start_angle");
        int stop_angle_index = data.indexOf("stop_angle");
        int cycle_count_index= data.indexOf("cycle_count");
        int slider_index= data.indexOf("slider");
        int station1_index=data.indexOf("station1=");
        int station2_index=data.indexOf("station2=");
        int station3_index=data.indexOf("station3=");
        int station4_index=data.indexOf("station4=");
        int station5_index=data.indexOf("station5=");
        
       String String_start_angle = data.substring(start_angle_index+11, stop_angle_index);
       start_angle=String_start_angle.toInt();
       Serial.print("start_angle=");
       Serial.println(start_angle);
       //////////////
       String String_stop_angle = data.substring(stop_angle_index+10,cycle_count_index);
       stop_angle=String_stop_angle.toInt();
       Serial.print("stop_angle=");
       Serial.println(stop_angle);
       //////////////
       String String_cycle_count=data.substring(cycle_count_index+11);
       cycle_count=String_cycle_count.toInt();
       Serial.print("cycle_count1=");
       Serial.println(cycle_count);
       /////////////
       String String_motor_speed=data.substring(slider_index+6);
       motor_speed=String_motor_speed.toInt();
       Serial.print("motor_speed=");
       Serial.println(motor_speed);
        /////////////
       String string_station1=data.substring(station1_index+9,station2_index);
       station1_status=string_station1;
       Serial.print("station1_status=");
       Serial.println(station1_status);
       //////////////
       String string_station2=data.substring(station2_index+9,station3_index);
       station2_status=string_station2;
       Serial.print("station2_status=");
       Serial.println(station2_status);
       //////////////
       String string_station3=data.substring(station3_index+9,station4_index);
       station3_status=string_station3;
       Serial.print("station3_status=");
       Serial.println(station3_status);
       /////////////
       String string_station4=data.substring(station4_index+9,station5_index);
       station4_status=string_station4;
       Serial.print("station4_status=");
       Serial.println(station4_status);
       /////////////
       String string_station5=data.substring(station5_index+9);
       station5_status=string_station5;
       Serial.print("station5_status=");
       Serial.println(station5_status);
        ///////////
        
         if(station1_status=="ON")
          {
            motor1_speed=motor_speed;
            start_angle1=start_angle;
            stop_angle1=stop_angle;
            cycle_count1=cycle_count;
          }
          else
            {
            motor1_speed=0;
            start_angle1=0;
            stop_angle1=0;
            cycle_count1=0;
            }
            
           if(station2_status=="ON")
            {
            motor2_speed=motor_speed;
            start_angle2=start_angle;
            stop_angle2=stop_angle;
            cycle_count2=cycle_count;
            }
          else
            {
            motor2_speed=0;
            start_angle2=0;
            stop_angle2=0;
            cycle_count2=0;
            }
            
            if(station3_status=="ON")
            {
            motor3_speed=motor_speed;
            start_angle3=start_angle;
            stop_angle3=stop_angle;
            cycle_count3=cycle_count;
            }
          else
            {
            motor3_speed=0;
            start_angle3=0;
            stop_angle3=0;
            cycle_count3=0;
            }
            
            if(station4_status=="ON")
            {
            motor4_speed=motor_speed;
            start_angle4=start_angle;
            stop_angle4=stop_angle;
            cycle_count4=cycle_count;
            }
          else
            {
            motor4_speed=0;
            start_angle4=0;
            stop_angle4=0;
            cycle_count4=0;
            }
            
            if(station5_status=="ON")
            {
            motor5_speed=motor_speed;
            start_angle5=start_angle;
            stop_angle5=stop_angle;
            cycle_count5=cycle_count;
            }
          else
            {
            motor5_speed=0;
            start_angle5=0;
            stop_angle5=0;
            cycle_count5=0;
            }
         }
        //Serial.print("start_flag=");
        //Serial.print(start_flag);
      }
     }
   }

 
//////////////////////////////////////////////////////////////////
void stepper_motor1()
{
 while(counter1<=cycle_count1)
 {
  serial_data();
  if(start_flag==false)
  {break;}
  if (motor1_speed < 100 ) 
   {motor1_speed = 0;}
   stepperMotorSpeed1 = map(motor1_speed , 0, 1023, 4000, 0); // map the values of motor speed  0 to 4000 and 1023 to 0
   for (int i=0 ; i<start_angle1 ; i++)
    {
      serial_data();
      step1clockwise();
      Serial.println("clockwise");
    }
    for (int i = 0 ; i <stop_angle1 ; i++)
    {
      serial_data();
      step1anticlockwise();
      Serial.println("Anticlockwise");
    }
  progress();
  counter1=counter1+1;
  Serial.print("counter1="); 
  Serial.println(counter1); 
 }
}

//////////////////////////////////////////////////////////////////
void stepper_motor2()
{
 while(counter2<=cycle_count2)
 {
  serial_data();
  if(start_flag==false)
  {break;}
  if (motor2_speed < 100 ) 
   {motor2_speed = 0;}
   stepperMotorSpeed2 = map(motor2_speed , 0, 1023, 4000, 0);
   for (int i=0 ; i<start_angle2 ; i++)
    {
      serial_data();
      step2clockwise();
      Serial.println("clockwise2");
    }
    for (int i = 0 ; i <stop_angle2 ; i++)
    {
      serial_data();
      step2anticlockwise();
      Serial.println("Anticlockwise2");
    }
  progress();
  counter2=counter2+1;
  Serial.print("counter2="); 
  Serial.println(counter2); 
 }
}

//////////////////////////////////////////////////////////////////
void stepper_motor3()
{
 while(counter3<=cycle_count3)
 {
  serial_data();
  if(start_flag==false)
  {break;}
  if (motor3_speed < 100 ) 
   {motor3_speed = 0;}
   stepperMotorSpeed3 = map(motor3_speed , 0, 1023, 4000, 0);
   for (int i=0 ; i<start_angle3 ; i++)
    {
      serial_data();
      step3clockwise();
      Serial.println("clockwise3");
    }
    for (int i = 0 ; i <stop_angle3 ; i++)
    {
      serial_data();
      step3anticlockwise();
      Serial.println("Anticlockwise3");
    }
  progress();
  counter3=counter3+1;
  Serial.print("counter3="); 
  Serial.println(counter3); 
 }
}

//////////////////////////////////////////////////////////////////
void stepper_motor4()
{
 while(counter4<=cycle_count4)
 {
  serial_data();
  if(start_flag==false)
  {break;}
  if (motor4_speed < 100 ) 
   {motor4_speed = 0;}
   stepperMotorSpeed4 = map(motor4_speed , 0, 1023, 4000, 0);
   for (int i=0 ; i<start_angle4 ; i++)
    {
      serial_data();
      step4clockwise();
      Serial.println("clockwise4");
    }
    for (int i = 0 ; i <stop_angle4 ; i++)
    {
      serial_data();
      step4anticlockwise();
      Serial.println("Anticlockwise4");
    }
  progress();
  counter4=counter4+1;
  Serial.print("counter4="); 
  Serial.println(counter4); 
 }
}

//////////////////////////////////////////////////////////////////
void stepper_motor5()
{
 while(counter5<=cycle_count5)
 {
  serial_data();
  if(start_flag==false)
  {break;}
  if (motor5_speed < 100 ) 
   {motor5_speed = 0;}
   stepperMotorSpeed5 = map(motor5_speed , 0, 1023, 4000, 0);
   for (int i=0 ; i<start_angle5 ; i++)
    {
      serial_data();
      step5clockwise();
      Serial.println("clockwise5");
    }
    for (int i = 0 ; i <stop_angle5 ; i++)
    {
      serial_data();
      step5anticlockwise();
      Serial.println("Anticlockwise5");
    }
  progress();
  counter5=counter5+1;
  Serial.print("counter5="); 
  Serial.println(counter5); 
 }
}
///////////////////////////////////////
void progress()
{
if(s1==true)
    {
      Serial1.print("t3.txt=");
      Serial1.print("\""); 
      Serial1.print(counter1); 
      Serial1.print("\"");      
      Serial1.write(0xff);
      Serial1.write(0xff);
      Serial1.write(0xff);
    }

   else if(s2==true)
    {
      Serial1.print("t3.txt=");
      Serial1.print("\""); 
      Serial1.print(counter2); 
      Serial1.print("\"");      
      Serial1.write(0xff);
      Serial1.write(0xff);
      Serial1.write(0xff);
    }

    else if(s3==true)
    {
      Serial1.print("t3.txt=");
      Serial1.print("\""); 
      Serial1.print(counter3); 
      Serial1.print("\"");      
      Serial1.write(0xff);
      Serial1.write(0xff);
      Serial1.write(0xff);
    }

    else if(s4==true)
    {
      Serial1.print("t3.txt=");
      Serial1.print("\""); 
      Serial1.print(counter4); 
      Serial1.print("\"");      
      Serial1.write(0xff);
      Serial1.write(0xff);
      Serial1.write(0xff);
    }

    else if(s5==true)
    {
      Serial1.print("t3.txt=");
      Serial1.print("\""); 
      Serial1.print(counter5); 
      Serial1.print("\"");      
      Serial1.write(0xff);
      Serial1.write(0xff);
      Serial1.write(0xff);
    }
//    else
//    {
//      Serial1.print("t3.txt=");
//      Serial1.print("\""); 
//      Serial1.print(counter1); 
//      Serial1.print("\"");      
//      Serial1.write(0xff);
//      Serial1.write(0xff);
//      Serial1.write(0xff); 
//    }
}
////////////////////////////////
void step1clockwise()
{ digitalWrite(dirPin1, LOW);
  for (int i = 0; i <stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin1, HIGH);
    delayMicroseconds(stepperMotorSpeed1);
    digitalWrite(stepPin1, LOW);
    delayMicroseconds(stepperMotorSpeed1);
  }
}
void step1anticlockwise()
{ digitalWrite(dirPin1, HIGH);
  for (int i = 0; i < stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin1, HIGH);
    delayMicroseconds(stepperMotorSpeed1);
    digitalWrite(stepPin1, LOW);
    delayMicroseconds(stepperMotorSpeed1);
  }
}

////////////////////////////////
void step2clockwise()
{ digitalWrite(dirPin2, LOW);
  for (int i = 0; i <stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin2, HIGH);
    delayMicroseconds(stepperMotorSpeed2);
    digitalWrite(stepPin2, LOW);
    delayMicroseconds(stepperMotorSpeed2);
  }
}
void step2anticlockwise()
{ digitalWrite(dirPin2, HIGH);
  for (int i = 0; i < stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin2, HIGH);
    delayMicroseconds(stepperMotorSpeed2);
    digitalWrite(stepPin2, LOW);
    delayMicroseconds(stepperMotorSpeed2);
  }
}

////////////////////////////////
void step3clockwise()
{ digitalWrite(dirPin3, LOW);
  for (int i = 0; i <stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin3, HIGH);
    delayMicroseconds(stepperMotorSpeed3);
    digitalWrite(stepPin3, LOW);
    delayMicroseconds(stepperMotorSpeed3);
  }
}
void step3anticlockwise()
{ digitalWrite(dirPin3, HIGH);
  for (int i = 0; i < stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin3, HIGH);
    delayMicroseconds(stepperMotorSpeed3);
    digitalWrite(stepPin3, LOW);
    delayMicroseconds(stepperMotorSpeed3);
  }
}

////////////////////////////////
void step4clockwise()
{ digitalWrite(dirPin4, LOW);
  for (int i = 0; i <stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin4, HIGH);
    delayMicroseconds(stepperMotorSpeed4);
    digitalWrite(stepPin4, LOW);
    delayMicroseconds(stepperMotorSpeed4);
  }
}
void step4anticlockwise()
{ digitalWrite(dirPin4, HIGH);
  for (int i = 0; i < stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin4, HIGH);
    delayMicroseconds(stepperMotorSpeed4);
    digitalWrite(stepPin4, LOW);
    delayMicroseconds(stepperMotorSpeed4);
  }
}

////////////////////////////////
void step5clockwise()
{ digitalWrite(dirPin5, LOW);
  for (int i = 0; i <stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin5, HIGH);
    delayMicroseconds(stepperMotorSpeed5);
    digitalWrite(stepPin5, LOW);
    delayMicroseconds(stepperMotorSpeed5);
  }
}
void step5anticlockwise()
{ digitalWrite(dirPin5, HIGH);
  for (int i = 0; i < stepsPerRevolution; i++)     // These four lines result in 1 step:
  {
    digitalWrite(stepPin5, HIGH);
    delayMicroseconds(stepperMotorSpeed5);
    digitalWrite(stepPin5, LOW);
    delayMicroseconds(stepperMotorSpeed5);
  }
}
